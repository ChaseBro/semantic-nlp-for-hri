annotators = tokenize, ssplit, pos, lemma, parse

# A true-casing annotator is also available (see below)
#annotators = tokenize, ssplit, pos, lemma, truecase

# A simple regex NER annotator is also available
# annotators = tokenize, ssplit, regexner

#Use these as EOS punctuation and discard them from the actual sentence content
#These are HTML tags that get expanded internally to correct syntax, e.g., from "p" to "<p>", "</p>" etc.
#Will have no effect if the "cleanxml" annotator is used
#ssplit.htmlBoundariesToDiscard = p,text

# This is the regular expression that describes which xml tags to keep
# the text from.  In order to on off the xml removal, add cleanxml
# to the list of annotators above after "tokenize".
#clean.xmltags = .*
# A set of tags which will force the end of a sentence.  HTML example:
# you would not want to end on <i>, but you would want to end on <p>.
# Once again, a regular expression.  
# (Blank means there are no sentence enders.)
#clean.sentenceendingtags =
# Whether or not to allow malformed xml
# StanfordCoreNLP.properties
#wordnet.dir=models/wordnet-3.0-prolog
